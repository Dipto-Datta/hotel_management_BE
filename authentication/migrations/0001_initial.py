# Generated by Django 4.2.4 on 2024-01-01 09:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='company_master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=2000)),
                ('company_address', models.CharField(blank=True, max_length=100, null=True)),
                ('tax', models.IntegerField(blank=True, null=True)),
                ('service_charge', models.IntegerField(blank=True, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('branch', models.CharField(blank=True, max_length=25, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('bat', models.CharField(blank=True, max_length=50, null=True)),
                ('bin', models.CharField(blank=True, max_length=50, null=True)),
                ('contact_person_name', models.CharField(blank=True, max_length=50, null=True)),
                ('contact_person_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('laundry_tax', models.IntegerField(blank=True, null=True)),
                ('laundry_sc', models.IntegerField(blank=True, null=True)),
                ('room_service_tax', models.IntegerField(blank=True, null=True)),
                ('room_service_sc', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255)),
                ('token', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='role_master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(blank=True, max_length=2000, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(null=True)),
                ('token', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expired_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='hotel_logo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(blank=True, null=True, upload_to='')),
                ('back01', models.ImageField(blank=True, null=True, upload_to='')),
                ('back02', models.ImageField(blank=True, null=True, upload_to='')),
                ('back03', models.ImageField(blank=True, null=True, upload_to='')),
                ('back04', models.ImageField(blank=True, null=True, upload_to='')),
                ('back05', models.ImageField(blank=True, null=True, upload_to='')),
                ('back06', models.ImageField(blank=True, null=True, upload_to='')),
                ('back07', models.ImageField(blank=True, null=True, upload_to='')),
                ('back08', models.ImageField(blank=True, null=True, upload_to='')),
                ('hotel_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.company_master')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('expired_date', models.DateTimeField(null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('is_manager', models.BooleanField(default=False)),
                ('limit_start', models.CharField(blank=True, max_length=100, null=True)),
                ('limit_end', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='authentication.company_master')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='authentication.role_master')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
